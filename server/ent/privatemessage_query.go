// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wiisportsresort/chat/server/ent/predicate"
	"github.com/wiisportsresort/chat/server/ent/privatemessage"
	"github.com/wiisportsresort/chat/server/ent/user"
)

// PrivateMessageQuery is the builder for querying PrivateMessage entities.
type PrivateMessageQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.PrivateMessage
	// eager-loading edges.
	withAuthor    *UserQuery
	withRecipient *UserQuery
	withParent    *PrivateMessageQuery
	withChildren  *PrivateMessageQuery
	withFKs       bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the PrivateMessageQuery builder.
func (pmq *PrivateMessageQuery) Where(ps ...predicate.PrivateMessage) *PrivateMessageQuery {
	pmq.predicates = append(pmq.predicates, ps...)
	return pmq
}

// Limit adds a limit step to the query.
func (pmq *PrivateMessageQuery) Limit(limit int) *PrivateMessageQuery {
	pmq.limit = &limit
	return pmq
}

// Offset adds an offset step to the query.
func (pmq *PrivateMessageQuery) Offset(offset int) *PrivateMessageQuery {
	pmq.offset = &offset
	return pmq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (pmq *PrivateMessageQuery) Unique(unique bool) *PrivateMessageQuery {
	pmq.unique = &unique
	return pmq
}

// Order adds an order step to the query.
func (pmq *PrivateMessageQuery) Order(o ...OrderFunc) *PrivateMessageQuery {
	pmq.order = append(pmq.order, o...)
	return pmq
}

// QueryAuthor chains the current query on the "author" edge.
func (pmq *PrivateMessageQuery) QueryAuthor() *UserQuery {
	query := &UserQuery{config: pmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(privatemessage.Table, privatemessage.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, privatemessage.AuthorTable, privatemessage.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRecipient chains the current query on the "recipient" edge.
func (pmq *PrivateMessageQuery) QueryRecipient() *UserQuery {
	query := &UserQuery{config: pmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(privatemessage.Table, privatemessage.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, privatemessage.RecipientTable, privatemessage.RecipientColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParent chains the current query on the "parent" edge.
func (pmq *PrivateMessageQuery) QueryParent() *PrivateMessageQuery {
	query := &PrivateMessageQuery{config: pmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(privatemessage.Table, privatemessage.FieldID, selector),
			sqlgraph.To(privatemessage.Table, privatemessage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, privatemessage.ParentTable, privatemessage.ParentColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (pmq *PrivateMessageQuery) QueryChildren() *PrivateMessageQuery {
	query := &PrivateMessageQuery{config: pmq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := pmq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(privatemessage.Table, privatemessage.FieldID, selector),
			sqlgraph.To(privatemessage.Table, privatemessage.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, privatemessage.ChildrenTable, privatemessage.ChildrenColumn),
		)
		fromU = sqlgraph.SetNeighbors(pmq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first PrivateMessage entity from the query.
// Returns a *NotFoundError when no PrivateMessage was found.
func (pmq *PrivateMessageQuery) First(ctx context.Context) (*PrivateMessage, error) {
	nodes, err := pmq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{privatemessage.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (pmq *PrivateMessageQuery) FirstX(ctx context.Context) *PrivateMessage {
	node, err := pmq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first PrivateMessage ID from the query.
// Returns a *NotFoundError when no PrivateMessage ID was found.
func (pmq *PrivateMessageQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pmq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{privatemessage.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (pmq *PrivateMessageQuery) FirstIDX(ctx context.Context) string {
	id, err := pmq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single PrivateMessage entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one PrivateMessage entity is not found.
// Returns a *NotFoundError when no PrivateMessage entities are found.
func (pmq *PrivateMessageQuery) Only(ctx context.Context) (*PrivateMessage, error) {
	nodes, err := pmq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{privatemessage.Label}
	default:
		return nil, &NotSingularError{privatemessage.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (pmq *PrivateMessageQuery) OnlyX(ctx context.Context) *PrivateMessage {
	node, err := pmq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only PrivateMessage ID in the query.
// Returns a *NotSingularError when exactly one PrivateMessage ID is not found.
// Returns a *NotFoundError when no entities are found.
func (pmq *PrivateMessageQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = pmq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = &NotSingularError{privatemessage.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (pmq *PrivateMessageQuery) OnlyIDX(ctx context.Context) string {
	id, err := pmq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of PrivateMessages.
func (pmq *PrivateMessageQuery) All(ctx context.Context) ([]*PrivateMessage, error) {
	if err := pmq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return pmq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (pmq *PrivateMessageQuery) AllX(ctx context.Context) []*PrivateMessage {
	nodes, err := pmq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of PrivateMessage IDs.
func (pmq *PrivateMessageQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := pmq.Select(privatemessage.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (pmq *PrivateMessageQuery) IDsX(ctx context.Context) []string {
	ids, err := pmq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (pmq *PrivateMessageQuery) Count(ctx context.Context) (int, error) {
	if err := pmq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return pmq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (pmq *PrivateMessageQuery) CountX(ctx context.Context) int {
	count, err := pmq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (pmq *PrivateMessageQuery) Exist(ctx context.Context) (bool, error) {
	if err := pmq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return pmq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (pmq *PrivateMessageQuery) ExistX(ctx context.Context) bool {
	exist, err := pmq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the PrivateMessageQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (pmq *PrivateMessageQuery) Clone() *PrivateMessageQuery {
	if pmq == nil {
		return nil
	}
	return &PrivateMessageQuery{
		config:        pmq.config,
		limit:         pmq.limit,
		offset:        pmq.offset,
		order:         append([]OrderFunc{}, pmq.order...),
		predicates:    append([]predicate.PrivateMessage{}, pmq.predicates...),
		withAuthor:    pmq.withAuthor.Clone(),
		withRecipient: pmq.withRecipient.Clone(),
		withParent:    pmq.withParent.Clone(),
		withChildren:  pmq.withChildren.Clone(),
		// clone intermediate query.
		sql:  pmq.sql.Clone(),
		path: pmq.path,
	}
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PrivateMessageQuery) WithAuthor(opts ...func(*UserQuery)) *PrivateMessageQuery {
	query := &UserQuery{config: pmq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmq.withAuthor = query
	return pmq
}

// WithRecipient tells the query-builder to eager-load the nodes that are connected to
// the "recipient" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PrivateMessageQuery) WithRecipient(opts ...func(*UserQuery)) *PrivateMessageQuery {
	query := &UserQuery{config: pmq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmq.withRecipient = query
	return pmq
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PrivateMessageQuery) WithParent(opts ...func(*PrivateMessageQuery)) *PrivateMessageQuery {
	query := &PrivateMessageQuery{config: pmq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmq.withParent = query
	return pmq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (pmq *PrivateMessageQuery) WithChildren(opts ...func(*PrivateMessageQuery)) *PrivateMessageQuery {
	query := &PrivateMessageQuery{config: pmq.config}
	for _, opt := range opts {
		opt(query)
	}
	pmq.withChildren = query
	return pmq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.PrivateMessage.Query().
//		GroupBy(privatemessage.FieldContent).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (pmq *PrivateMessageQuery) GroupBy(field string, fields ...string) *PrivateMessageGroupBy {
	group := &PrivateMessageGroupBy{config: pmq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := pmq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return pmq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Content string `json:"content,omitempty"`
//	}
//
//	client.PrivateMessage.Query().
//		Select(privatemessage.FieldContent).
//		Scan(ctx, &v)
//
func (pmq *PrivateMessageQuery) Select(fields ...string) *PrivateMessageSelect {
	pmq.fields = append(pmq.fields, fields...)
	return &PrivateMessageSelect{PrivateMessageQuery: pmq}
}

func (pmq *PrivateMessageQuery) prepareQuery(ctx context.Context) error {
	for _, f := range pmq.fields {
		if !privatemessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if pmq.path != nil {
		prev, err := pmq.path(ctx)
		if err != nil {
			return err
		}
		pmq.sql = prev
	}
	return nil
}

func (pmq *PrivateMessageQuery) sqlAll(ctx context.Context) ([]*PrivateMessage, error) {
	var (
		nodes       = []*PrivateMessage{}
		withFKs     = pmq.withFKs
		_spec       = pmq.querySpec()
		loadedTypes = [4]bool{
			pmq.withAuthor != nil,
			pmq.withRecipient != nil,
			pmq.withParent != nil,
			pmq.withChildren != nil,
		}
	)
	if pmq.withAuthor != nil || pmq.withRecipient != nil || pmq.withParent != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, privatemessage.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &PrivateMessage{config: pmq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, pmq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := pmq.withAuthor; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*PrivateMessage)
		for i := range nodes {
			if nodes[i].user_private_messages == nil {
				continue
			}
			fk := *nodes[i].user_private_messages
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_private_messages" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Author = n
			}
		}
	}

	if query := pmq.withRecipient; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*PrivateMessage)
		for i := range nodes {
			if nodes[i].user_private_messages_received == nil {
				continue
			}
			fk := *nodes[i].user_private_messages_received
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(user.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "user_private_messages_received" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Recipient = n
			}
		}
	}

	if query := pmq.withParent; query != nil {
		ids := make([]string, 0, len(nodes))
		nodeids := make(map[string][]*PrivateMessage)
		for i := range nodes {
			if nodes[i].private_message_children == nil {
				continue
			}
			fk := *nodes[i].private_message_children
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(privatemessage.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "private_message_children" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Parent = n
			}
		}
	}

	if query := pmq.withChildren; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[string]*PrivateMessage)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Children = []*PrivateMessage{}
		}
		query.withFKs = true
		query.Where(predicate.PrivateMessage(func(s *sql.Selector) {
			s.Where(sql.InValues(privatemessage.ChildrenColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.private_message_children
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "private_message_children" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "private_message_children" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Children = append(node.Edges.Children, n)
		}
	}

	return nodes, nil
}

func (pmq *PrivateMessageQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := pmq.querySpec()
	_spec.Node.Columns = pmq.fields
	if len(pmq.fields) > 0 {
		_spec.Unique = pmq.unique != nil && *pmq.unique
	}
	return sqlgraph.CountNodes(ctx, pmq.driver, _spec)
}

func (pmq *PrivateMessageQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := pmq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (pmq *PrivateMessageQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   privatemessage.Table,
			Columns: privatemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: privatemessage.FieldID,
			},
		},
		From:   pmq.sql,
		Unique: true,
	}
	if unique := pmq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := pmq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatemessage.FieldID)
		for i := range fields {
			if fields[i] != privatemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := pmq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := pmq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := pmq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := pmq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (pmq *PrivateMessageQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(pmq.driver.Dialect())
	t1 := builder.Table(privatemessage.Table)
	columns := pmq.fields
	if len(columns) == 0 {
		columns = privatemessage.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if pmq.sql != nil {
		selector = pmq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if pmq.unique != nil && *pmq.unique {
		selector.Distinct()
	}
	for _, p := range pmq.predicates {
		p(selector)
	}
	for _, p := range pmq.order {
		p(selector)
	}
	if offset := pmq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := pmq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// PrivateMessageGroupBy is the group-by builder for PrivateMessage entities.
type PrivateMessageGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (pmgb *PrivateMessageGroupBy) Aggregate(fns ...AggregateFunc) *PrivateMessageGroupBy {
	pmgb.fns = append(pmgb.fns, fns...)
	return pmgb
}

// Scan applies the group-by query and scans the result into the given value.
func (pmgb *PrivateMessageGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := pmgb.path(ctx)
	if err != nil {
		return err
	}
	pmgb.sql = query
	return pmgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := pmgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) StringsX(ctx context.Context) []string {
	v, err := pmgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pmgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) StringX(ctx context.Context) string {
	v, err := pmgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) IntsX(ctx context.Context) []int {
	v, err := pmgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pmgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) IntX(ctx context.Context) int {
	v, err := pmgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := pmgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pmgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) Float64X(ctx context.Context) float64 {
	v, err := pmgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(pmgb.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := pmgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := pmgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (pmgb *PrivateMessageGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pmgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pmgb *PrivateMessageGroupBy) BoolX(ctx context.Context) bool {
	v, err := pmgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pmgb *PrivateMessageGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range pmgb.fields {
		if !privatemessage.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := pmgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := pmgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (pmgb *PrivateMessageGroupBy) sqlQuery() *sql.Selector {
	selector := pmgb.sql.Select()
	aggregation := make([]string, 0, len(pmgb.fns))
	for _, fn := range pmgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(pmgb.fields)+len(pmgb.fns))
		for _, f := range pmgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(pmgb.fields...)...)
}

// PrivateMessageSelect is the builder for selecting fields of PrivateMessage entities.
type PrivateMessageSelect struct {
	*PrivateMessageQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (pms *PrivateMessageSelect) Scan(ctx context.Context, v interface{}) error {
	if err := pms.prepareQuery(ctx); err != nil {
		return err
	}
	pms.sql = pms.PrivateMessageQuery.sqlQuery(ctx)
	return pms.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (pms *PrivateMessageSelect) ScanX(ctx context.Context, v interface{}) {
	if err := pms.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Strings(ctx context.Context) ([]string, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (pms *PrivateMessageSelect) StringsX(ctx context.Context) []string {
	v, err := pms.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = pms.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (pms *PrivateMessageSelect) StringX(ctx context.Context) string {
	v, err := pms.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Ints(ctx context.Context) ([]int, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (pms *PrivateMessageSelect) IntsX(ctx context.Context) []int {
	v, err := pms.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = pms.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (pms *PrivateMessageSelect) IntX(ctx context.Context) int {
	v, err := pms.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (pms *PrivateMessageSelect) Float64sX(ctx context.Context) []float64 {
	v, err := pms.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = pms.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (pms *PrivateMessageSelect) Float64X(ctx context.Context) float64 {
	v, err := pms.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(pms.fields) > 1 {
		return nil, errors.New("ent: PrivateMessageSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := pms.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (pms *PrivateMessageSelect) BoolsX(ctx context.Context) []bool {
	v, err := pms.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (pms *PrivateMessageSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = pms.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{privatemessage.Label}
	default:
		err = fmt.Errorf("ent: PrivateMessageSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (pms *PrivateMessageSelect) BoolX(ctx context.Context) bool {
	v, err := pms.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pms *PrivateMessageSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := pms.sql.Query()
	if err := pms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
