// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/wiisportsresort/chat/server/ent/privatemessage"
	"github.com/wiisportsresort/chat/server/ent/user"
)

// PrivateMessage is the model entity for the PrivateMessage schema.
type PrivateMessage struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PrivateMessageQuery when eager-loading is set.
	Edges                          PrivateMessageEdges `json:"edges"`
	private_message_children       *string
	user_private_messages          *string
	user_private_messages_received *string
}

// PrivateMessageEdges holds the relations/edges for other nodes in the graph.
type PrivateMessageEdges struct {
	// Author holds the value of the author edge.
	Author *User `json:"author,omitempty"`
	// Recipient holds the value of the recipient edge.
	Recipient *User `json:"recipient,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *PrivateMessage `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*PrivateMessage `json:"children,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateMessageEdges) AuthorOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Author == nil {
			// The edge author was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Author, nil
	}
	return nil, &NotLoadedError{edge: "author"}
}

// RecipientOrErr returns the Recipient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateMessageEdges) RecipientOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Recipient == nil {
			// The edge recipient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Recipient, nil
	}
	return nil, &NotLoadedError{edge: "recipient"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PrivateMessageEdges) ParentOrErr() (*PrivateMessage, error) {
	if e.loadedTypes[2] {
		if e.Parent == nil {
			// The edge parent was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: privatemessage.Label}
		}
		return e.Parent, nil
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e PrivateMessageEdges) ChildrenOrErr() ([]*PrivateMessage, error) {
	if e.loadedTypes[3] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PrivateMessage) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case privatemessage.FieldID, privatemessage.FieldContent:
			values[i] = new(sql.NullString)
		case privatemessage.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case privatemessage.ForeignKeys[0]: // private_message_children
			values[i] = new(sql.NullString)
		case privatemessage.ForeignKeys[1]: // user_private_messages
			values[i] = new(sql.NullString)
		case privatemessage.ForeignKeys[2]: // user_private_messages_received
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PrivateMessage", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PrivateMessage fields.
func (pm *PrivateMessage) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case privatemessage.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pm.ID = value.String
			}
		case privatemessage.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pm.Content = value.String
			}
		case privatemessage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pm.CreatedAt = value.Time
			}
		case privatemessage.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field private_message_children", values[i])
			} else if value.Valid {
				pm.private_message_children = new(string)
				*pm.private_message_children = value.String
			}
		case privatemessage.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_private_messages", values[i])
			} else if value.Valid {
				pm.user_private_messages = new(string)
				*pm.user_private_messages = value.String
			}
		case privatemessage.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_private_messages_received", values[i])
			} else if value.Valid {
				pm.user_private_messages_received = new(string)
				*pm.user_private_messages_received = value.String
			}
		}
	}
	return nil
}

// QueryAuthor queries the "author" edge of the PrivateMessage entity.
func (pm *PrivateMessage) QueryAuthor() *UserQuery {
	return (&PrivateMessageClient{config: pm.config}).QueryAuthor(pm)
}

// QueryRecipient queries the "recipient" edge of the PrivateMessage entity.
func (pm *PrivateMessage) QueryRecipient() *UserQuery {
	return (&PrivateMessageClient{config: pm.config}).QueryRecipient(pm)
}

// QueryParent queries the "parent" edge of the PrivateMessage entity.
func (pm *PrivateMessage) QueryParent() *PrivateMessageQuery {
	return (&PrivateMessageClient{config: pm.config}).QueryParent(pm)
}

// QueryChildren queries the "children" edge of the PrivateMessage entity.
func (pm *PrivateMessage) QueryChildren() *PrivateMessageQuery {
	return (&PrivateMessageClient{config: pm.config}).QueryChildren(pm)
}

// Update returns a builder for updating this PrivateMessage.
// Note that you need to call PrivateMessage.Unwrap() before calling this method if this PrivateMessage
// was returned from a transaction, and the transaction was committed or rolled back.
func (pm *PrivateMessage) Update() *PrivateMessageUpdateOne {
	return (&PrivateMessageClient{config: pm.config}).UpdateOne(pm)
}

// Unwrap unwraps the PrivateMessage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pm *PrivateMessage) Unwrap() *PrivateMessage {
	tx, ok := pm.config.driver.(*txDriver)
	if !ok {
		panic("ent: PrivateMessage is not a transactional entity")
	}
	pm.config.driver = tx.drv
	return pm
}

// String implements the fmt.Stringer.
func (pm *PrivateMessage) String() string {
	var builder strings.Builder
	builder.WriteString("PrivateMessage(")
	builder.WriteString(fmt.Sprintf("id=%v", pm.ID))
	builder.WriteString(", content=")
	builder.WriteString(pm.Content)
	builder.WriteString(", created_at=")
	builder.WriteString(pm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PrivateMessages is a parsable slice of PrivateMessage.
type PrivateMessages []*PrivateMessage

func (pm PrivateMessages) config(cfg config) {
	for _i := range pm {
		pm[_i].config = cfg
	}
}
