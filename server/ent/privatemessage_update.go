// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wiisportsresort/chat/server/ent/predicate"
	"github.com/wiisportsresort/chat/server/ent/privatemessage"
	"github.com/wiisportsresort/chat/server/ent/user"
)

// PrivateMessageUpdate is the builder for updating PrivateMessage entities.
type PrivateMessageUpdate struct {
	config
	hooks    []Hook
	mutation *PrivateMessageMutation
}

// Where appends a list predicates to the PrivateMessageUpdate builder.
func (pmu *PrivateMessageUpdate) Where(ps ...predicate.PrivateMessage) *PrivateMessageUpdate {
	pmu.mutation.Where(ps...)
	return pmu
}

// SetContent sets the "content" field.
func (pmu *PrivateMessageUpdate) SetContent(s string) *PrivateMessageUpdate {
	pmu.mutation.SetContent(s)
	return pmu
}

// SetCreatedAt sets the "created_at" field.
func (pmu *PrivateMessageUpdate) SetCreatedAt(t time.Time) *PrivateMessageUpdate {
	pmu.mutation.SetCreatedAt(t)
	return pmu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableCreatedAt(t *time.Time) *PrivateMessageUpdate {
	if t != nil {
		pmu.SetCreatedAt(*t)
	}
	return pmu
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (pmu *PrivateMessageUpdate) SetAuthorID(id string) *PrivateMessageUpdate {
	pmu.mutation.SetAuthorID(id)
	return pmu
}

// SetAuthor sets the "author" edge to the User entity.
func (pmu *PrivateMessageUpdate) SetAuthor(u *User) *PrivateMessageUpdate {
	return pmu.SetAuthorID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (pmu *PrivateMessageUpdate) SetRecipientID(id string) *PrivateMessageUpdate {
	pmu.mutation.SetRecipientID(id)
	return pmu
}

// SetRecipient sets the "recipient" edge to the User entity.
func (pmu *PrivateMessageUpdate) SetRecipient(u *User) *PrivateMessageUpdate {
	return pmu.SetRecipientID(u.ID)
}

// SetParentID sets the "parent" edge to the PrivateMessage entity by ID.
func (pmu *PrivateMessageUpdate) SetParentID(id string) *PrivateMessageUpdate {
	pmu.mutation.SetParentID(id)
	return pmu
}

// SetNillableParentID sets the "parent" edge to the PrivateMessage entity by ID if the given value is not nil.
func (pmu *PrivateMessageUpdate) SetNillableParentID(id *string) *PrivateMessageUpdate {
	if id != nil {
		pmu = pmu.SetParentID(*id)
	}
	return pmu
}

// SetParent sets the "parent" edge to the PrivateMessage entity.
func (pmu *PrivateMessageUpdate) SetParent(p *PrivateMessage) *PrivateMessageUpdate {
	return pmu.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PrivateMessage entity by IDs.
func (pmu *PrivateMessageUpdate) AddChildIDs(ids ...string) *PrivateMessageUpdate {
	pmu.mutation.AddChildIDs(ids...)
	return pmu
}

// AddChildren adds the "children" edges to the PrivateMessage entity.
func (pmu *PrivateMessageUpdate) AddChildren(p ...*PrivateMessage) *PrivateMessageUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.AddChildIDs(ids...)
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (pmu *PrivateMessageUpdate) Mutation() *PrivateMessageMutation {
	return pmu.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (pmu *PrivateMessageUpdate) ClearAuthor() *PrivateMessageUpdate {
	pmu.mutation.ClearAuthor()
	return pmu
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (pmu *PrivateMessageUpdate) ClearRecipient() *PrivateMessageUpdate {
	pmu.mutation.ClearRecipient()
	return pmu
}

// ClearParent clears the "parent" edge to the PrivateMessage entity.
func (pmu *PrivateMessageUpdate) ClearParent() *PrivateMessageUpdate {
	pmu.mutation.ClearParent()
	return pmu
}

// ClearChildren clears all "children" edges to the PrivateMessage entity.
func (pmu *PrivateMessageUpdate) ClearChildren() *PrivateMessageUpdate {
	pmu.mutation.ClearChildren()
	return pmu
}

// RemoveChildIDs removes the "children" edge to PrivateMessage entities by IDs.
func (pmu *PrivateMessageUpdate) RemoveChildIDs(ids ...string) *PrivateMessageUpdate {
	pmu.mutation.RemoveChildIDs(ids...)
	return pmu
}

// RemoveChildren removes "children" edges to PrivateMessage entities.
func (pmu *PrivateMessageUpdate) RemoveChildren(p ...*PrivateMessage) *PrivateMessageUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmu.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pmu *PrivateMessageUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pmu.hooks) == 0 {
		if err = pmu.check(); err != nil {
			return 0, err
		}
		affected, err = pmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmu.check(); err != nil {
				return 0, err
			}
			pmu.mutation = mutation
			affected, err = pmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pmu.hooks) - 1; i >= 0; i-- {
			if pmu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmu *PrivateMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := pmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pmu *PrivateMessageUpdate) Exec(ctx context.Context) error {
	_, err := pmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmu *PrivateMessageUpdate) ExecX(ctx context.Context) {
	if err := pmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmu *PrivateMessageUpdate) check() error {
	if v, ok := pmu.mutation.Content(); ok {
		if err := privatemessage.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PrivateMessage.content": %w`, err)}
		}
	}
	if _, ok := pmu.mutation.AuthorID(); pmu.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrivateMessage.author"`)
	}
	if _, ok := pmu.mutation.RecipientID(); pmu.mutation.RecipientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrivateMessage.recipient"`)
	}
	return nil
}

func (pmu *PrivateMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   privatemessage.Table,
			Columns: privatemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: privatemessage.FieldID,
			},
		},
	}
	if ps := pmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemessage.FieldContent,
		})
	}
	if value, ok := pmu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: privatemessage.FieldCreatedAt,
		})
	}
	if pmu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.AuthorTable,
			Columns: []string{privatemessage.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.AuthorTable,
			Columns: []string{privatemessage.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.RecipientTable,
			Columns: []string{privatemessage.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.RecipientTable,
			Columns: []string{privatemessage.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.ParentTable,
			Columns: []string{privatemessage.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.ParentTable,
			Columns: []string{privatemessage.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pmu.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmu.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PrivateMessageUpdateOne is the builder for updating a single PrivateMessage entity.
type PrivateMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PrivateMessageMutation
}

// SetContent sets the "content" field.
func (pmuo *PrivateMessageUpdateOne) SetContent(s string) *PrivateMessageUpdateOne {
	pmuo.mutation.SetContent(s)
	return pmuo
}

// SetCreatedAt sets the "created_at" field.
func (pmuo *PrivateMessageUpdateOne) SetCreatedAt(t time.Time) *PrivateMessageUpdateOne {
	pmuo.mutation.SetCreatedAt(t)
	return pmuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableCreatedAt(t *time.Time) *PrivateMessageUpdateOne {
	if t != nil {
		pmuo.SetCreatedAt(*t)
	}
	return pmuo
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (pmuo *PrivateMessageUpdateOne) SetAuthorID(id string) *PrivateMessageUpdateOne {
	pmuo.mutation.SetAuthorID(id)
	return pmuo
}

// SetAuthor sets the "author" edge to the User entity.
func (pmuo *PrivateMessageUpdateOne) SetAuthor(u *User) *PrivateMessageUpdateOne {
	return pmuo.SetAuthorID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (pmuo *PrivateMessageUpdateOne) SetRecipientID(id string) *PrivateMessageUpdateOne {
	pmuo.mutation.SetRecipientID(id)
	return pmuo
}

// SetRecipient sets the "recipient" edge to the User entity.
func (pmuo *PrivateMessageUpdateOne) SetRecipient(u *User) *PrivateMessageUpdateOne {
	return pmuo.SetRecipientID(u.ID)
}

// SetParentID sets the "parent" edge to the PrivateMessage entity by ID.
func (pmuo *PrivateMessageUpdateOne) SetParentID(id string) *PrivateMessageUpdateOne {
	pmuo.mutation.SetParentID(id)
	return pmuo
}

// SetNillableParentID sets the "parent" edge to the PrivateMessage entity by ID if the given value is not nil.
func (pmuo *PrivateMessageUpdateOne) SetNillableParentID(id *string) *PrivateMessageUpdateOne {
	if id != nil {
		pmuo = pmuo.SetParentID(*id)
	}
	return pmuo
}

// SetParent sets the "parent" edge to the PrivateMessage entity.
func (pmuo *PrivateMessageUpdateOne) SetParent(p *PrivateMessage) *PrivateMessageUpdateOne {
	return pmuo.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PrivateMessage entity by IDs.
func (pmuo *PrivateMessageUpdateOne) AddChildIDs(ids ...string) *PrivateMessageUpdateOne {
	pmuo.mutation.AddChildIDs(ids...)
	return pmuo
}

// AddChildren adds the "children" edges to the PrivateMessage entity.
func (pmuo *PrivateMessageUpdateOne) AddChildren(p ...*PrivateMessage) *PrivateMessageUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.AddChildIDs(ids...)
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (pmuo *PrivateMessageUpdateOne) Mutation() *PrivateMessageMutation {
	return pmuo.mutation
}

// ClearAuthor clears the "author" edge to the User entity.
func (pmuo *PrivateMessageUpdateOne) ClearAuthor() *PrivateMessageUpdateOne {
	pmuo.mutation.ClearAuthor()
	return pmuo
}

// ClearRecipient clears the "recipient" edge to the User entity.
func (pmuo *PrivateMessageUpdateOne) ClearRecipient() *PrivateMessageUpdateOne {
	pmuo.mutation.ClearRecipient()
	return pmuo
}

// ClearParent clears the "parent" edge to the PrivateMessage entity.
func (pmuo *PrivateMessageUpdateOne) ClearParent() *PrivateMessageUpdateOne {
	pmuo.mutation.ClearParent()
	return pmuo
}

// ClearChildren clears all "children" edges to the PrivateMessage entity.
func (pmuo *PrivateMessageUpdateOne) ClearChildren() *PrivateMessageUpdateOne {
	pmuo.mutation.ClearChildren()
	return pmuo
}

// RemoveChildIDs removes the "children" edge to PrivateMessage entities by IDs.
func (pmuo *PrivateMessageUpdateOne) RemoveChildIDs(ids ...string) *PrivateMessageUpdateOne {
	pmuo.mutation.RemoveChildIDs(ids...)
	return pmuo
}

// RemoveChildren removes "children" edges to PrivateMessage entities.
func (pmuo *PrivateMessageUpdateOne) RemoveChildren(p ...*PrivateMessage) *PrivateMessageUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmuo.RemoveChildIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pmuo *PrivateMessageUpdateOne) Select(field string, fields ...string) *PrivateMessageUpdateOne {
	pmuo.fields = append([]string{field}, fields...)
	return pmuo
}

// Save executes the query and returns the updated PrivateMessage entity.
func (pmuo *PrivateMessageUpdateOne) Save(ctx context.Context) (*PrivateMessage, error) {
	var (
		err  error
		node *PrivateMessage
	)
	if len(pmuo.hooks) == 0 {
		if err = pmuo.check(); err != nil {
			return nil, err
		}
		node, err = pmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmuo.check(); err != nil {
				return nil, err
			}
			pmuo.mutation = mutation
			node, err = pmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pmuo.hooks) - 1; i >= 0; i-- {
			if pmuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pmuo *PrivateMessageUpdateOne) SaveX(ctx context.Context) *PrivateMessage {
	node, err := pmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pmuo *PrivateMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := pmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmuo *PrivateMessageUpdateOne) ExecX(ctx context.Context) {
	if err := pmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmuo *PrivateMessageUpdateOne) check() error {
	if v, ok := pmuo.mutation.Content(); ok {
		if err := privatemessage.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PrivateMessage.content": %w`, err)}
		}
	}
	if _, ok := pmuo.mutation.AuthorID(); pmuo.mutation.AuthorCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrivateMessage.author"`)
	}
	if _, ok := pmuo.mutation.RecipientID(); pmuo.mutation.RecipientCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "PrivateMessage.recipient"`)
	}
	return nil
}

func (pmuo *PrivateMessageUpdateOne) sqlSave(ctx context.Context) (_node *PrivateMessage, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   privatemessage.Table,
			Columns: privatemessage.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: privatemessage.FieldID,
			},
		},
	}
	id, ok := pmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PrivateMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, privatemessage.FieldID)
		for _, f := range fields {
			if !privatemessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != privatemessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pmuo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemessage.FieldContent,
		})
	}
	if value, ok := pmuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: privatemessage.FieldCreatedAt,
		})
	}
	if pmuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.AuthorTable,
			Columns: []string{privatemessage.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.AuthorTable,
			Columns: []string{privatemessage.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.RecipientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.RecipientTable,
			Columns: []string{privatemessage.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.RecipientTable,
			Columns: []string{privatemessage.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.ParentTable,
			Columns: []string{privatemessage.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.ParentTable,
			Columns: []string{privatemessage.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pmuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !pmuo.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pmuo.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PrivateMessage{config: pmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{privatemessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
