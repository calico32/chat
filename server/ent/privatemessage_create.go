// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/wiisportsresort/chat/server/ent/privatemessage"
	"github.com/wiisportsresort/chat/server/ent/user"
)

// PrivateMessageCreate is the builder for creating a PrivateMessage entity.
type PrivateMessageCreate struct {
	config
	mutation *PrivateMessageMutation
	hooks    []Hook
}

// SetContent sets the "content" field.
func (pmc *PrivateMessageCreate) SetContent(s string) *PrivateMessageCreate {
	pmc.mutation.SetContent(s)
	return pmc
}

// SetCreatedAt sets the "created_at" field.
func (pmc *PrivateMessageCreate) SetCreatedAt(t time.Time) *PrivateMessageCreate {
	pmc.mutation.SetCreatedAt(t)
	return pmc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pmc *PrivateMessageCreate) SetNillableCreatedAt(t *time.Time) *PrivateMessageCreate {
	if t != nil {
		pmc.SetCreatedAt(*t)
	}
	return pmc
}

// SetID sets the "id" field.
func (pmc *PrivateMessageCreate) SetID(s string) *PrivateMessageCreate {
	pmc.mutation.SetID(s)
	return pmc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (pmc *PrivateMessageCreate) SetAuthorID(id string) *PrivateMessageCreate {
	pmc.mutation.SetAuthorID(id)
	return pmc
}

// SetAuthor sets the "author" edge to the User entity.
func (pmc *PrivateMessageCreate) SetAuthor(u *User) *PrivateMessageCreate {
	return pmc.SetAuthorID(u.ID)
}

// SetRecipientID sets the "recipient" edge to the User entity by ID.
func (pmc *PrivateMessageCreate) SetRecipientID(id string) *PrivateMessageCreate {
	pmc.mutation.SetRecipientID(id)
	return pmc
}

// SetRecipient sets the "recipient" edge to the User entity.
func (pmc *PrivateMessageCreate) SetRecipient(u *User) *PrivateMessageCreate {
	return pmc.SetRecipientID(u.ID)
}

// SetParentID sets the "parent" edge to the PrivateMessage entity by ID.
func (pmc *PrivateMessageCreate) SetParentID(id string) *PrivateMessageCreate {
	pmc.mutation.SetParentID(id)
	return pmc
}

// SetNillableParentID sets the "parent" edge to the PrivateMessage entity by ID if the given value is not nil.
func (pmc *PrivateMessageCreate) SetNillableParentID(id *string) *PrivateMessageCreate {
	if id != nil {
		pmc = pmc.SetParentID(*id)
	}
	return pmc
}

// SetParent sets the "parent" edge to the PrivateMessage entity.
func (pmc *PrivateMessageCreate) SetParent(p *PrivateMessage) *PrivateMessageCreate {
	return pmc.SetParentID(p.ID)
}

// AddChildIDs adds the "children" edge to the PrivateMessage entity by IDs.
func (pmc *PrivateMessageCreate) AddChildIDs(ids ...string) *PrivateMessageCreate {
	pmc.mutation.AddChildIDs(ids...)
	return pmc
}

// AddChildren adds the "children" edges to the PrivateMessage entity.
func (pmc *PrivateMessageCreate) AddChildren(p ...*PrivateMessage) *PrivateMessageCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pmc.AddChildIDs(ids...)
}

// Mutation returns the PrivateMessageMutation object of the builder.
func (pmc *PrivateMessageCreate) Mutation() *PrivateMessageMutation {
	return pmc.mutation
}

// Save creates the PrivateMessage in the database.
func (pmc *PrivateMessageCreate) Save(ctx context.Context) (*PrivateMessage, error) {
	var (
		err  error
		node *PrivateMessage
	)
	pmc.defaults()
	if len(pmc.hooks) == 0 {
		if err = pmc.check(); err != nil {
			return nil, err
		}
		node, err = pmc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PrivateMessageMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pmc.check(); err != nil {
				return nil, err
			}
			pmc.mutation = mutation
			if node, err = pmc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pmc.hooks) - 1; i >= 0; i-- {
			if pmc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pmc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pmc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pmc *PrivateMessageCreate) SaveX(ctx context.Context) *PrivateMessage {
	v, err := pmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmc *PrivateMessageCreate) Exec(ctx context.Context) error {
	_, err := pmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmc *PrivateMessageCreate) ExecX(ctx context.Context) {
	if err := pmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pmc *PrivateMessageCreate) defaults() {
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		v := privatemessage.DefaultCreatedAt()
		pmc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pmc *PrivateMessageCreate) check() error {
	if _, ok := pmc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "PrivateMessage.content"`)}
	}
	if v, ok := pmc.mutation.Content(); ok {
		if err := privatemessage.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PrivateMessage.content": %w`, err)}
		}
	}
	if _, ok := pmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PrivateMessage.created_at"`)}
	}
	if _, ok := pmc.mutation.AuthorID(); !ok {
		return &ValidationError{Name: "author", err: errors.New(`ent: missing required edge "PrivateMessage.author"`)}
	}
	if _, ok := pmc.mutation.RecipientID(); !ok {
		return &ValidationError{Name: "recipient", err: errors.New(`ent: missing required edge "PrivateMessage.recipient"`)}
	}
	return nil
}

func (pmc *PrivateMessageCreate) sqlSave(ctx context.Context) (*PrivateMessage, error) {
	_node, _spec := pmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PrivateMessage.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (pmc *PrivateMessageCreate) createSpec() (*PrivateMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &PrivateMessage{config: pmc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: privatemessage.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: privatemessage.FieldID,
			},
		}
	)
	if id, ok := pmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pmc.mutation.Content(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: privatemessage.FieldContent,
		})
		_node.Content = value
	}
	if value, ok := pmc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: privatemessage.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := pmc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.AuthorTable,
			Columns: []string{privatemessage.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_private_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.RecipientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.RecipientTable,
			Columns: []string{privatemessage.RecipientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_private_messages_received = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   privatemessage.ParentTable,
			Columns: []string{privatemessage.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.private_message_children = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pmc.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   privatemessage.ChildrenTable,
			Columns: []string{privatemessage.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: privatemessage.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PrivateMessageCreateBulk is the builder for creating many PrivateMessage entities in bulk.
type PrivateMessageCreateBulk struct {
	config
	builders []*PrivateMessageCreate
}

// Save creates the PrivateMessage entities in the database.
func (pmcb *PrivateMessageCreateBulk) Save(ctx context.Context) ([]*PrivateMessage, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pmcb.builders))
	nodes := make([]*PrivateMessage, len(pmcb.builders))
	mutators := make([]Mutator, len(pmcb.builders))
	for i := range pmcb.builders {
		func(i int, root context.Context) {
			builder := pmcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PrivateMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pmcb *PrivateMessageCreateBulk) SaveX(ctx context.Context) []*PrivateMessage {
	v, err := pmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pmcb *PrivateMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := pmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pmcb *PrivateMessageCreateBulk) ExecX(ctx context.Context) {
	if err := pmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
